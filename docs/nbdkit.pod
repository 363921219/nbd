=encoding utf8

=head1 NAME

nbdkit - A toolkit for creating NBD servers

=head1 SYNOPSIS

 nbdkit [--dump-config] [-f] [-g GROUP] [-i IPADDR]
        [-P PIDFILE] [-p PORT] [-r] [--run CMD] [-s]
        [-U SOCKET] [-u USER] [-v] [-V]
        PLUGIN [key=value [key=value [...]]]

=head1 DESCRIPTION

C<nbdkit> is both a toolkit for creating Network Block Device (NBD)
servers from "unconventional" sources and the name of an NBD server.

To create a new block device source, all you have to do is write a few
glue functions.  The liberal licensing of nbdkit is meant to allow you
to link nbdkit with proprietary libraries or include nbdkit in
proprietary code.

If you want to write an nbdkit plugin, you should read
L<nbdkit-plugin(3)>.

Several plugins may be found in C<$libdir/nbdkit/plugins>.  You can
give the full path to the plugin, like this:

 nbdkit $libdir/nbdkit/plugins/nbdkit-file-plugin.so [...]

but it is usually more convenient to use this equivalent syntax:

 nbdkit file [...]

C<$libdir> is set at compile time.  To print it out, do:

 nbdkit --dump-config

=head1 EXAMPLES

Serve file C<disk.img> on port 10809:

 nbdkit file file=disk.img

Run the example1 plugin and connect to it using L<guestfish(1)>:

 nbdkit example1
 guestfish --ro -a nbd://localhost

Run the example3 plugin and connect to it using L<guestfish(1)>:

 nbdkit example3 size=1G
 guestfish --ro -a nbd://localhost

To display usage information about a specific plugin:

 nbdkit --help example1

=head1 GLOBAL OPTIONS

=over 4

=item B<--help>

Display brief command line usage information and exit.

=item B<--dump-config>

Dump out the compile-time configuration values and exit.

=item B<-f>

=item B<--foreground>

=item B<--no-fork>

I<Don't> fork into the background.

=item B<-g> GROUP

=item B<--group> GROUP

Change group to C<GROUP> after starting up.  A group name or numeric
group ID can be used.

The server needs sufficient permissions to be able to do this.
Normally this would mean starting the server up as root.

See also I<-u>.

=item B<-i> IPADDR

=item B<--ip-addr> IPADDR

=item B<--ipaddr> IPADDR

Listen on the specified interface.  The default is to listen on all
interfaces.  See also I<-p>.

=item B<-P> PIDFILE

=item B<--pid-file> PIDFILE

=item B<--pidfile> PIDFILE

Write C<PIDFILE> (containing the process ID of the server) after
nbdkit becomes ready to accept connections.

If the file already exists, it is overwritten.  nbdkit I<does not>
delete the file when it exits.

=item B<-p> PORT

=item B<--port> PORT

Change the TCP/IP port number on which nbdkit serves requests.
The default is C<10809>.  See also I<-i>.

=item B<-r>

=item B<--read-only>

=item B<--readonly>

The export will be read-only.  If a client writes, then it will get an
error.

Note that some plugins inherently don't support writes.  With those
plugins the I<-r> option is added implicitly.

Copy-on-write (or "snapshot") functionality is not supported by this
server.  However if you are using qemu as a client (or indirectly via
libguestfs) then it supports snapshots.

=item B<--run> CMD

Run nbdkit as a captive subprocess of C<CMD>.  When C<CMD> exits,
nbdkit is killed.  See L</CAPTIVE NBDKIT> below.

This option implies I<--foreground>.

=item B<-s>

=item B<--single>

=item B<--stdin>

Don't fork.  Handle a single NBD connection on stdin/stdout.  After
stdin closes, the server exits.

You can use this option to run nbdkit from inetd, systemd or similar
superservers; or just for testing; or if you want to run nbdkit in a
non-conventional way.

This option implies I<--foreground>.

=item B<-U> SOCKET

=item B<--unix> SOCKET

=item B<-U ->

=item B<--unix ->

Accept connections on the Unix domain socket C<SOCKET> (which is a
path).

nbdkit creates this socket, but it will probably have incorrect
permissions (too permissive).  If it is a problem that some
unauthorized user could connect to this socket between the time that
nbdkit starts up and the authorized user connects, then put the socket
into a directory that has restrictive permissions.

nbdkit does B<not> delete the socket file when it exits.  The caller
should delete the socket file after use (else if you try to start
nbdkit up again you will get an C<Address already in use> error).

If the socket name is I<-> then nbdkit generates a randomly named
private socket.  This is useful with L</CAPTIVE NBDKIT>.

=item B<-u> USER

=item B<--user> USER

Change user to C<USER> after starting up.  A user name or numeric user
ID can be used.

The server needs sufficient permissions to be able to do this.
Normally this would mean starting the server up as root.

See also I<-g>.

=item B<-v>

=item B<--verbose>

Enable verbose messages.

It's a good idea to use I<-f> as well so the process does not fork
into the background (but not required).

=item B<-V>

=item B<--version>

Print the version number of nbdkit and exit.

=back

=head1 PLUGIN CONFIGURATION

After specifying the plugin name you can (optionally, it depends
on the plugin) give plugin configuration on the command line in
the form of C<key=value>.  For example:

 nbdkit file file=disk.img

To list all the options supported by a plugin, do:

 nbdkit --help file

=head1 CAPTIVE NBDKIT

You can run nbdkit as a "captive process", using the I<--run> option.
This means that nbdkit runs as long as (for example) L<qemu(1)> or
L<guestfish(1)> is running.  When those exit, nbdkit is killed.

Some examples should make this clear.

To run nbdkit captive under qemu:

 nbdkit file file=disk.img --run 'qemu -drive file=$nbd,if=virtio'

On the qemu command line, C<$nbd> is substituted automatically with
the right NBD path so it can connect to nbdkit.  When qemu exits,
nbdkit is killed and cleaned up automatically.

Running nbdkit captive under guestfish:

 nbdkit file file=disk.img --run 'guestfish --format=raw -a $nbd -i'

When guestfish exits, nbdkit is killed.

The following shell variables are available in the I<--run> argument:

=over 4

=item C<$nbd>

A URL that refers to the nbdkit port or socket.

Note there is some magic here, since qemu and guestfish URLs have a
different format, so nbdkit tries to guess which you are running.  If
the magic doesn't work, try using the variables below instead.

=item C<$port>

If E<ne> "", the port number that nbdkit is listening on.

=item C<$unixsocket>

If E<ne> "", the Unix domain socket that nbdkit is listening on.

=back

I<--run> implies I<--foreground>.  It is not possible, and probably
not desirable, to have nbdkit fork into the background when using
I<--run>.

Even when running captive, nbdkit still listens on the regular TCP/IP
port, unless you specify the I<-p>/I<-U> options.  If you want a truly
private captive nbdkit, then you should create a private random
Unix socket, like this:

 nbdkit -U - plugin [args] --run '...'

=head1 SIGNALS

C<nbdkit> responds to the following signals:

=over 4

=item C<SIGINT>

=item C<SIGQUIT>

=item C<SIGTERM>

The server exits cleanly.

=item C<SIGPIPE>

This signal is ignored.

=back

=head1 SEE ALSO

L<nbdkit-plugin(3)>,
L<nbdkit-curl-plugin(1)>,
L<nbdkit-example1-plugin(1)>,
L<nbdkit-example2-plugin(1)>,
L<nbdkit-example3-plugin(1)>,
L<nbdkit-file-plugin(1)>,
L<nbdkit-gzip-plugin(1)>,
L<nbdkit-libvirt-plugin(1)>,
L<nbdkit-ocaml-plugin(3)>,
L<nbdkit-perl-plugin(3)>,
L<nbdkit-python-plugin(3)>,
L<nbdkit-vddk-plugin(1)>.
L<nbdkit-xz-plugin(1)>.

=head1 AUTHORS

Richard W.M. Jones

=head1 COPYRIGHT

Copyright (C) 2013 Red Hat Inc.

=head1 LICENSE

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are
met:

=over 4

=item *

Redistributions of source code must retain the above copyright
notice, this list of conditions and the following disclaimer.

=item *

Redistributions in binary form must reproduce the above copyright
notice, this list of conditions and the following disclaimer in the
documentation and/or other materials provided with the distribution.

=item *

Neither the name of Red Hat nor the names of its contributors may be
used to endorse or promote products derived from this software without
specific prior written permission.

=back

THIS SOFTWARE IS PROVIDED BY RED HAT AND CONTRIBUTORS ''AS IS'' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL RED HAT OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
